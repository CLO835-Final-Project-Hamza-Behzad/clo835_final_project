name: Build and Push to ECR

on:
  push:
    branches:
      - main
      - prod

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
            
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Test AWS Credentials
        run: |
          echo "Running AWS sts get-caller-identity"
          aws sts get-caller-identity 
          
      - name: Login to Amazon ECR
        run: |
          echo "Logging in to ECR"
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com || exit 1

      - name: Check if ECR Repositories Exist and Create If Needed
        run: |
          echo "Checking if repositories exist"
          
          # Check for web app repo existence
          aws ecr describe-repositories --repository-names my-web-app-repo --region ${{ secrets.AWS_REGION }} || aws ecr create-repository --repository-name my-web-app-repo --region ${{ secrets.AWS_REGION }}
          
          # Check for MySQL repo existence
          aws ecr describe-repositories --repository-names mysql-repo --region ${{ secrets.AWS_REGION }} || aws ecr create-repository --repository-name mysql-repo --region ${{ secrets.AWS_REGION }}
        
      - name: Build Docker Images
        run: |
          echo "Building webapp image"
          docker build -t webapp-image -f Dockerfile .
          echo "Building mysql image"
          docker build -t mysql-image -f Dockerfile_mysql .

      - name: Tag and Push to Amazon ECR
        run: |
          echo "Tagging webapp image"
          docker tag webapp-image:latest ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-web-app-repo:latest
          echo "Tagging mysql image"
          docker tag mysql-image:latest ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mysql-repo:latest
          echo "Pushing webapp image to ECR"
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-web-app-repo:latest
          echo "Pushing mysql image to ECR"
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mysql-repo:latest

  infrastructure:
    name: Provision AWS Infrastructure
    runs-on: ubuntu-latest
    environment: staging
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: us-east-1  # Set the region here
    
    outputs:
      ec2_public_ip: ${{ steps.capture_terraform_outputs.outputs.ec2_public_ip  }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.8'
    
      - name: Install AWS CLI and Boto3
        run: |
          pip install awscli boto3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        # working-directory: ./terraform
        working-directory: ./tef_test

      - name: Terraform Plan
        run: terraform plan
        # working-directory: ./terraform
        working-directory: ./tef_test

      - name: Terraform Apply
        run: terraform apply -auto-approve
        # working-directory: ./terraform
        working-directory: ./tef_test

      - name: Capture Terraform Outputs
        id: capture_terraform_outputs
        run: |
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> "$GITHUB_OUTPUT"
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)"
        # working-directory: ./terraform
        working-directory: ./tef_test
        shell: bash

  deploy_to_ec2:
      name: Deploy to EC2 and Run docker-compose
      needs: [infrastructure, build-and-push]
      runs-on: ubuntu-latest
      environment: staging
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1  # Set the region here
        EC2_KEY: ${{ secrets.EC2_Key }}
        EC2_PUBLIC_IP: ${{ needs.infrastructure.outputs.ec2_public_ip }}

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Print EC2 Public IP
          run: echo "EC2 Public IP is ${{ env.EC2_PUBLIC_IP }}"

        - name: Set up SSH
          run: |
            mkdir -p ~/.ssh
            echo "$EC2_KEY" > ~/.ssh/ec2_key
            chmod 600 ~/.ssh/ec2_key
          env:
            EC2_KEY: ${{ secrets.EC2_Key }}

        - name: Wait for EC2 instance to complete setup
          run: |
            echo "Waiting for EC2 instance setup to complete..."
            sleep 120  # Wait for 2 minutes

        - name: SSH into EC2 and Run docker-compose
          run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ec2-user@${{ env.EC2_PUBLIC_IP }} << 'EOF'
              cd /home/ec2-user/app
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 097656145156.dkr.ecr.us-east-1.amazonaws.com
              docker-compose down
              docker-compose up -d
            EOF
            
